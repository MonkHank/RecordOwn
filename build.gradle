// Top-level build file where you can add configuration options common to all sub-projects/modules.

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 自定义扩展属性，所有subproject可以使用
ext{
    compileSdkVersion=28
    buildToolsVersion="28.0.3"
    minSdkVersion=14
    targetSdkVersion=compileSdkVersion

    v7Version="28.0.0"
}

/*** 配置开始执行的回调*/
this.beforeEvaluate {
    println '-project-配置开始执行的回调'
}

/*** 配置阶段完成以后的回调*/
this.afterEvaluate { println '-project-配置阶段完成以后的回调'}

/*** gradle执行完毕后的回调监听*/
this.gradle.buildFinished { println '-project-gradle执行完毕后的回调监听'}

this.gradle.beforeProject {}
this.gradle.afterProject {}

/**=============== project相关api讲解，执行在gradle配置阶段，执行阶段在Task中在讲 ==============*/
this.getProjects()
def getProjects(){
    println '------------------'
    println 'Root Project'
    println '------------------'
    this.getAllprojects().eachWithIndex { Project entry, int index ->
        if (index == 0) {
            println "----Root project: ${entry.name}"
        }else {
            println "+---Sub project: ${entry.name}"
        }
    }
}
// 获取子projects  getSubprojects()
def getSubProjects() {
    this.getSubprojects().eachWithIndex { Project entry, int index ->
        println "+---Root project: ${entry.name}"
    }
}

// 获取父project   getParent()
def getParentProjects(){
    def name= this.getParent().name
    println "the parent project name is ${name}"
}

// 获取root project   getRootProject()
def getRootProjects(){
    def name= this.getRootProject().name
    println "the root project name is ${name}"
}

/**======================属性api介绍========================================================*/
println '-------- 属性 ----------'
// 获取指定 project，配置子project的gradle，一般不会怎么做
project('app'){Project project->
    println project.name
    apply plugin: 'com.android.application'
//    group 'com.imooc'
//    version '1.0.0-release'
    dependencies {}
    android{}
}
project('commonutils'){Project project->
    apply plugin: 'com.android.library'
//    group 'com.imooc'
//    version '1.0.0-release'
    dependencies {}
    android{}
}

// 配置所有project，包括root和subproject
allprojects {
    group 'com.imooc'
    version '1.0.0-release'
    repositories {
        google()
        jcenter()
    }
}
println project('annotationprocessor').group

// 不包括当前结点工程，只包括他的subproject
subprojects { Project project ->
    // 为所有库工程提供上传maven仓库的功能，publishToMaven.gradle文件还没有
    if (project.plugins.hasPlugin('com.android.library')) {
//    apply from: '../publishToMaven.gradle'
    }
}

// 为所有子工程添加下列属性
/*subprojects {
    ext {
        compileSdkVersion=28
        buildToolsVersion="28.0.3"
        minSdkVersion=14
        targetSdkVersion=compileSdkVersion

        v7Version="28.0.0"
    }
}*/

// rootproject引用配置gradle文件，其他subproject继承rootproject，使用common.gradle内部属性，
// 管理项目配置属性
//apply from: this.file('common.gradle')

/**========================= 文件属性api操作 =============================================*/
println '------- file ------------'
println getRootDir().absolutePath
println getBuildDir().absolutePath
println getProjectDir().absolutePath

println getContent('local.properties')
def getContent(String path) {
    try {
        def file = file(path)
//        def files = files(path)
        // 相当于当前的project工程开始查找
        return file.text
    } catch (GradleException e) {
        println 'file not found'
    }
    return null
}

/**========================= 依赖相关api =============================================*/
println '------ 依赖相关api--------------'
// 闭包参数可以去掉，是因为闭包的delegate就是去掉的这些参数
buildscript { ScriptHandler scriptHandler->
    // 配置工程仓库地址，也说明gradle兼容maven、jcenter仓库
    scriptHandler.repositories {RepositoryHandler repositoryHandler->
        repositoryHandler.google()
        repositoryHandler.jcenter()
//        repositoryHandler.mavenCentral()
//        repositoryHandler.ivy {}
        // 这个闭包的参数为 MavenArtifactRepository
        repositoryHandler.maven {MavenArtifactRepository mp->
            // 一般为企业的名字
            mp.name 'personal'
            // 一般为企业的maven的仓库地址
            mp.url 'http://localhoset:8081:/nexus/repositories'
            mp.credentials{
                username='admin'
                password='admin123'

            }
        }
    }
    // 配置工程"插件"依赖地址（gradle本身对第三方的依赖）
    scriptHandler.dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        // tinker 热修复
//        classpath 'com.tencent.tinker-patch-gralde-plugin:1.7.7'
    }
}



